Secure Shell （安全外科协议，简称SSH）
ssh是一种加密的网络传输协议，为网络服务提供安全的传输环境。
ssh通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接，多用于远程登录系统，利用ssh来传输命令行界面和远程执行命令。

基本用法
SSH主要用于远程登录，假设用户名为user，登陆远程主机host
$ ssh user@host

如果本地用户名与远程用户名一致，可以省略
$ ssh host

SSH默认端口为22，登陆请求会发送到远程主机的22端口，使用p可以修改端口
$ ssh -p 2222 user@host

ssh传输过程：
1.远程主机收到用户的登录请求，把自己的公钥发给用户
2.用户使用这个公钥，将登陆密码加密后，发送回来
3.远程主机用自己的私钥，解密登陆密码，如果密码正确，就同意用户登录

一.口令登录：
如果是第一次登陆对方主机，系统会出现下面的提示：
$ ssh user@host
　　The authenticity of host 'host (12.18.429.21)' can't be established.
　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.
　　Are you sure you want to continue connecting (yes/no)?

这段话的意思是，无法确认host主机的真实性，只知道他的公钥指纹，是否连接

所谓"公钥指纹"，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。
很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。

假设用户接受，远程主机的公钥被接受以后会保存在本地的$HOME/.ssh/known_hosts中，下次再连接这台主机，系统会检测出公钥已经有了，从而跳过警告的部分，直接输入密码。

每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。


二.公钥登录
公钥登录的原理就是用户将自己的公钥储存在远程主机上，登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。

这种方法要求用户必须提供自己的公钥
$ ssh-keygen

运行结束以后，在$HOME/.ssh/目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。

$ ssh-copy-id user@host
以后就可以直接登录了

如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面"#"注释是否取掉。
　　RSAAuthentication yes
　　PubkeyAuthentication yes
　　AuthorizedKeysFile .ssh/authorized_keys
然后，重启远程主机的ssh服务。
　　// ubuntu系统
　　service ssh restart
　　// debian系统
　　/etc/init.d/ssh restart


1. 多条连接共享
如果你需要在多个窗口中打开到同一个服务器的连接，而不想每次都输入用户名，密码，或是等待连接建立，那么你可以配置SSH的连接共享选项，在本地打开你的SSH配置文件，通常它们位于~/.ssh/config，然后添加下面2行：
ControlMaster auto
ControlPath /tmp/ssh_mux_%h_%p_%r
现在试试断开你与服务器的连接，并建立一条新连接，然后打开一个新窗口，再创建一条连接，你会发现，第二条连接几乎是在瞬间就建立好了。

2. 长连接
如果你发现自己每条需要连接同一个服务器无数次，那么长连接选项就是为你准备的：
ControlPersist 4h
现在你每次通过SSH与服务器建立连接之后，这条连接将被保持4个小时，即使在你退出服务器之后，这条连接依然可以重用，因此，在你下一次（4小时之内）登录服务器时，你会发现连接以闪电般的速度建立完成，这个选项对于通过scp拷贝多个文件提速尤其明显，因为你不在需要为每个文件做单独的认证了。


3. 连接中转
有时候你可能需要从一个服务器连接另外一个服务器，比如在两个服务器之间直接传输数据，而不用通过本地电脑中转：
www1 $ scp -pr templates www2:$PWD
（顺便说一下，当你需要在两台服务器间拷贝文件时，$PWD变量时非常有用的），因为即使你已经在两台服务器上添加了你本地电脑的公钥，scp默认仍然会提示你输入密码：这是因为你用来作为跳板的那台服务器上并没有你的私钥，所以，第二胎服务器会拒绝你的公钥，但是一定不要通过将你的私钥拷贝到中转服务器上来解决这个问题，你可以使用agent forwarding来解决这个问题，只要在你的.ssh/config文件中加入下面这行代码就可以了：
ForwardAgent yes
或者是在Putty中勾上“Allow agent forwarding”选项，现在你的本地SSH就变成了第一台服务器的SSH代理，从第一台服务器在连接其它服务器就变和和在你本地一样简单，注意，如果要开启这个选项，前提是这个中间服务器值得你信任。

4. 省略主机名
输入服务器的完整主机名来建立一个新的SSH连接实在是太乏味无聊了，尤其是当你有一组拥有相同域名但是子域名不同的服务器需要管理时，比如下面这样：
* www1.example.com
* www2.example.com
* mail.example.com
* intranet.internal.example.com
* backup.internal.example.com
* dev.internal.example.com
或许你的网络已经配置了可以直接使用短域名，比如intranet，但是如果你的网络不支持，实际上你可以自己搞定这个问题，而不用求助网络管理员。
解决办法根据你用的操作系统而略有差异，下面是我的Ubuntu系统的配置：
prepend domain-search “internal.example.com”, “example.com”;
然后你需要重启网络:$ sudo restart network-manager
不同的系统，这两条命令可能会略有差异。





